Good thinking! Here's a comprehensive test script for the AI to create that will verify EVERY part of your
  platform:

  Tell the AI to Create This Test Suite:

  // Create a file: test-all-systems.js

  const testResults = {
    passed: [],
    failed: [],
    warnings: []
  };

  async function runAllTests() {
    console.log("üîç COMPREHENSIVE PLATFORM TEST STARTING...\n");

    // 1. DATABASE CONNECTION TEST
    await testDatabase();

    // 2. AUTHENTICATION FLOW TEST
    await testAuthentication();

    // 3. ELECTION DATA TEST
    await testElectionData();

    // 4. API INTEGRATIONS TEST
    await testAPIs();

    // 5. SECURITY TEST
    await testSecurity();

    // 6. PERFORMANCE TEST
    await testPerformance();

    // 7. ERROR HANDLING TEST
    await testErrorHandling();

    // FINAL REPORT
    generateReport();
  }

  // Test Functions:

  async function testDatabase() {
    console.log("üìä Testing Database...");

    try {
      // Test connection
      const dbTest = await fetch('/api/health/database');
      if (!dbTest.ok) throw new Error('Database connection failed');

      // Test each table
      const tables = ['users', 'elections', 'candidates', 'watchlists', 'user_analytics'];
      for (const table of tables) {
        const count = await fetch(`/api/test/count/${table}`);
        if (!count.ok) throw new Error(`Table ${table} inaccessible`);
      }

      testResults.passed.push('Database: All tables accessible');
    } catch (error) {
      testResults.failed.push(`Database: ${error.message}`);
    }
  }

  async function testAuthentication() {
    console.log("üîê Testing Authentication...");

    const testUser = {
      email: `test${Date.now()}@test.com`,
      password: 'TestPass123!'
    };

    try {
      // Test signup
      const signup = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(testUser)
      });
      if (!signup.ok) throw new Error('Signup failed');

      // Test signin
      const signin = await fetch('/api/auth/signin', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(testUser)
      });
      if (!signin.ok) throw new Error('Signin failed');
      const { token } = await signin.json();
      if (!token) throw new Error('No auth token received');

      // Test protected route
      const profile = await fetch('/api/user/profile', {
        headers: {'Authorization': `Bearer ${token}`}
      });
      if (!profile.ok) throw new Error('Protected route failed');

      // Test watchlist
      const watchlist = await fetch('/api/user/watchlist', {
        headers: {'Authorization': `Bearer ${token}`}
      });
      if (!watchlist.ok) throw new Error('Watchlist failed');

      testResults.passed.push('Authentication: Full flow working');
    } catch (error) {
      testResults.failed.push(`Authentication: ${error.message}`);
    }
  }

  async function testElectionData() {
    console.log("üó≥Ô∏è Testing Election Data...");

    try {
      // Test all elections
      const elections = await fetch('/api/elections');
      const data = await elections.json();
      if (!data.elections || data.elections.length === 0) {
        throw new Error('No elections found');
      }

      // Test filtering
      const states = ['CA', 'TX', 'FL', 'NY', 'AL'];
      for (const state of states) {
        const filtered = await fetch(`/api/elections?state=${state}`);
        if (!filtered.ok) throw new Error(`State filter ${state} failed`);
      }

      // Test candidates
      const electionId = data.elections[0].id;
      const candidates = await fetch(`/api/elections/${electionId}/candidates`);
      const candData = await candidates.json();
      if (!candData.candidates || candData.candidates.length === 0) {
        testResults.warnings.push('No candidates found for elections');
      }

      testResults.passed.push(`Elections: ${data.elections.length} elections loaded`);
    } catch (error) {
      testResults.failed.push(`Elections: ${error.message}`);
    }
  }

  async function testAPIs() {
    console.log("üåê Testing External APIs...");

    // Test Google Civic
    try {
      const civic = await fetch('/api/civic/elections');
      if (!civic.ok) throw new Error('Google Civic API failed');
      testResults.passed.push('Google Civic API: Connected');
    } catch (error) {
      testResults.failed.push(`Google Civic: ${error.message}`);
    }

    // Test Congress API
    try {
      const congress = await fetch('/api/congress/bills');
      if (!congress.ok) throw new Error('Congress API failed');
      testResults.passed.push('Congress API: Connected');
    } catch (error) {
      testResults.warnings.push(`Congress API: ${error.message}`);
    }

    // Test Perplexity AI
    try {
      const ai = await fetch('/api/ai/search', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({query: 'test'})
      });
      if (!ai.ok) throw new Error('AI search failed');
      testResults.passed.push('Perplexity AI: Connected');
    } catch (error) {
      testResults.warnings.push(`AI Search: ${error.message}`);
    }
  }

  async function testSecurity() {
    console.log("üõ°Ô∏è Testing Security...");

    try {
      // Test SQL injection
      const sqlTest = await fetch("/api/elections?state='; DROP TABLE users;--");
      if (!sqlTest.ok) throw new Error('SQL injection protection failed');

      // Test XSS
      const xssTest = await fetch('/api/search?q=<script>alert("xss")</script>');
      const xssData = await xssTest.text();
      if (xssData.includes('<script>')) throw new Error('XSS protection failed');

      // Test rate limiting
      const requests = [];
      for (let i = 0; i < 100; i++) {
        requests.push(fetch('/api/elections'));
      }
      const results = await Promise.all(requests);
      const rateLimited = results.some(r => r.status === 429);
      if (!rateLimited) testResults.warnings.push('Rate limiting not detected');

      testResults.passed.push('Security: SQL injection and XSS protected');
    } catch (error) {
      testResults.failed.push(`Security: ${error.message}`);
    }
  }

  async function testPerformance() {
    console.log("‚ö° Testing Performance...");

    try {
      // Test response times
      const start = Date.now();
      const promises = [];

      for (let i = 0; i < 10; i++) {
        promises.push(fetch('/api/elections'));
        promises.push(fetch('/api/elections?state=CA'));
        promises.push(fetch('/api/congress/bills'));
      }

      await Promise.all(promises);
      const duration = Date.now() - start;
      const avgTime = duration / 30;

      if (avgTime > 500) {
        testResults.warnings.push(`Performance: Slow response time ${avgTime}ms`);
      } else {
        testResults.passed.push(`Performance: Avg response ${avgTime}ms`);
      }

      // Test cache
      const cached1 = await fetch('/api/elections');
      const cached2 = await fetch('/api/elections');
      // Second should be faster if cached

    } catch (error) {
      testResults.failed.push(`Performance: ${error.message}`);
    }
  }

  async function testErrorHandling() {
    console.log("‚ùå Testing Error Handling...");

    try {
      // Test 404
      const notFound = await fetch('/api/nonexistent');
      if (notFound.status !== 404) throw new Error('404 handling failed');

      // Test invalid data
      const invalid = await fetch('/api/elections/invalid-id/candidates');
      if (invalid.status !== 400 && invalid.status !== 404) {
        throw new Error('Invalid ID handling failed');
      }

      // Test malformed JSON
      const malformed = await fetch('/api/auth/signin', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: '{invalid json'
      });
      if (malformed.ok) throw new Error('Malformed JSON accepted');

      testResults.passed.push('Error Handling: Properly catches errors');
    } catch (error) {
      testResults.failed.push(`Error Handling: ${error.message}`);
    }
  }

  function generateReport() {
    console.log("\nüìã FINAL TEST REPORT\n");
    console.log("‚úÖ PASSED:", testResults.passed.length);
    testResults.passed.forEach(test => console.log(`  ‚úì ${test}`));

    console.log("\n‚ùå FAILED:", testResults.failed.length);
    testResults.failed.forEach(test => console.log(`  ‚úó ${test}`));

    console.log("\n‚ö†Ô∏è  WARNINGS:", testResults.warnings.length);
    testResults.warnings.forEach(test => console.log(`  ‚ö† ${test}`));

    const score = (testResults.passed.length /
      (testResults.passed.length + testResults.failed.length)) * 100;

    console.log(`\nüéØ OVERALL SCORE: ${score.toFixed(1)}%`);

    if (testResults.failed.length > 0) {
      console.log("\nüö® CRITICAL: Fix failed tests before launch!");
    } else if (testResults.warnings.length > 0) {
      console.log("\n‚ö° READY: Can launch, but address warnings soon");
    } else {
      console.log("\nüöÄ PERFECT: Ready for production!");
    }
  }

  // Run all tests
  runAllTests();

  Tell the AI:
  "Create this comprehensive test suite as test-all-systems.js and add an endpoint /api/test/run-all that executes
  it. This will test every single feature including database, auth, APIs, security, performance, and error
  handling. Show me the full test report."

  This will catch ANY issues before launch!