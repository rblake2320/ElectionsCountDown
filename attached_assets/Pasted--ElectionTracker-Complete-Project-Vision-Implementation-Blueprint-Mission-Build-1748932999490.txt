# **ElectionTracker – Complete Project Vision & Implementation Blueprint**

> **Mission**
> Build *the* authoritative, real‑time election‑information platform for every U.S. race—from federal to municipal—through November 2026 and beyond.

---

## 1  Universal Election Coverage

| Requirement        | Details                                                                        |
| ------------------ | ------------------------------------------------------------------------------ |
| **Scope**          | Federal, state, county, municipal, school‑board & judicial races               |
| **Countdowns**     | Millisecond‑precise timers for *every* election                                |
| **Candidate Data** | Polling, finance, endorsements, biographies                                    |
| **Voter Info**     | Registration rules, deadlines, polling places, absentee / early‑vote logistics |
| **Data Sources**   | Congress.gov, Google Civic, state election APIs, FEC, OpenSecrets              |

---

## 2  Intelligent User Experience

* **Personalization** – geo‑detect + preference engine suggests relevant races.
* **Advanced Filters** – party, level, importance, timeframe, geography.
* **Watchlist & Push Alerts** – save elections, receive deadline/result notifications (email + SMS).
* **Responsive & PWA** – first‑class mobile usability.

---

## 3  AI‑Powered Analysis

| Feature                      | Engine                              | Output                                 |
| ---------------------------- | ----------------------------------- | -------------------------------------- |
| Deep‑dive Election Summaries | Perplexity AI                       | 6‑8 s analysis modal                   |
| Real‑time Candidate Research | LLM tool‑chain                      | Policy stances, history, controversies |
| Predictive Models            | Gradient‑boost / transformer hybrid | Probabilistic outcome forecasts        |
| Historical Context           | Vector DB retrieval                 | Prior cycle comparison, turnout trends |
| Automated Fact‑Checks        | RAG pipeline + source voting        | Inline citations, confidence scores    |

---

## 4  Congressional & Legislative Tracking

* Live 535‑member roster (incl. delegates) with **bill sponsorship, votes, committees**.
* Committee calendar & hearing feeds.
* Member scorecards + ideological heatmaps.

---

## 5  Security • Compliance • Integrity

* **Replit OAuth** sessions + JWT refresh.
* End‑to‑end TLS, PII encryption at rest (AES‑256).
* GDPR / CCPA tooling, user data export + deletion.
* WAF + bot‑mitigation, fraud analytics.
* Nightly off‑site backups, RTO < 15 min.

---

## 6  Monetization & Sustainability

| Tier                   | Offering                                    | Price Idea |
| ---------------------- | ------------------------------------------- | ---------- |
| **Basic (Free)**       | Personal watchlist, email alerts            | \$0        |
| **Premium**            | SMS, advanced filters, AI analysis          | \$9 / mo   |
| **Pro / Campaign**     | Voter file overlays, custom API, dashboards | \$99 / mo  |
| **Enterprise / Media** | White‑label widgets, SLA, bulk API          | custom     |

* **Data Marketplace** – campaign finance & sentiment exports.
* **Analytics Dashboards** – for campaign managers & newsrooms.

---

## 7  Success Metrics

* *100 %* coverage of U.S. elections through 2026.
* ≤ 200 ms 95‑th percentile API latency; sub‑second UI paint.
* 99.9 % uptime Aug–Nov election windows.
* < 0.5 % data discrepancy vs. official sources.
* ≥ 20 % MoM active‑user growth post‑launch.

---

## 8  Technical Architecture (Current ↔ Target)

| Layer           | Stack (as‑is)         | Planned Upgrades                                   |
| --------------- | --------------------- | -------------------------------------------------- |
| **Frontend**    | React + TS + Tailwind | Next.js app router, dark‑mode theme, PWA manifest  |
| **Backend**     | Express.js            | Migrate to Fastify for perf; enable WebSocket push |
| **DB / ORM**    | PostgreSQL + Drizzle  | Add TimescaleDB for time‑series election data      |
| **AI Services** | Perplexity REST       | Add custom Llama 3‑70B RAG cluster for predictions |
| **Infra**       | Replit + Fly.io       | Multi‑region edge + CDN cache‑layer                |

---

## 9  UI / UX Enhancement **(2025‑Caliber Visual Design)**

Modernize the interface to feel like a 2025 SaaS dashboard rather than a 2010 admin panel.
Below is a **copy‑paste‑ready design guide** plus component snippets so the dev team can implement immediately without altering backend APIs.

### 9.1  Visual Language

| Token               | Value                                    | Purpose                 |
| ------------------- | ---------------------------------------- | ----------------------- |
| `--color-primary`   | `#2563eb → #1d4ed8`                      | Actions, highlights     |
| `--color-accent`    | `#f97316`                                | Tag chips, warnings     |
| `--color-success`   | `#10b981`                                | Won races, valid states |
| `--color-error`     | `#ef4444`                                | Lost races, errors      |
| `--color-surface-0` | `#ffffff`                                | Card / panel base       |
| `--color-surface-1` | `rgba(255,255,255,.6)` *(glass)*         | Frosted overlay         |
| `--color-bg`        | `#f3f4f6` *(light)* / `#09090b` *(dark)* | Body background         |
| `--color-fg`        | `#1f2937` *(light)* / `#e5e7eb` *(dark)* | Body text               |

Add to **`tailwind.config.ts`**:

```ts
extend: {
  colors: {
    primary: 'var(--color-primary)',
    accent: 'var(--color-accent)',
    success: 'var(--color-success)',
    error: 'var(--color-error)',
    surface0: 'var(--color-surface-0)',
    surface1: 'var(--color-surface-1)',
    bg: 'var(--color-bg)',
    fg: 'var(--color-fg)',
  },
  backdropBlur: {
    xs: '2px',
  },
}
```

### 9.2  Layout Grid

```tsx
// client/src/components/layout.tsx
export const Layout: React.FC<PropsWithChildren> = ({ children }) => (
  <div className="grid h-screen grid-cols-[19rem_1fr] bg-bg text-fg">
    <Sidebar />
    <main className="overflow-y-auto p-6 flex flex-col gap-8">
      {children}
    </main>
  </div>
);
```

* Sidebar is **sticky**, scroll only `<main>`.
* Mobile breakpoint (`md:`): sidebar becomes off‑canvas drawer.

### 9.3  Card Aesthetics & Polish

```tsx
<Card className="relative backdrop-blur-xs border border-white/10 bg-surface1 shadow-lg rounded-2xl transition-shadow duration-200 hover:shadow-2xl flex flex-col gap-6 p-6">
  {/* 1️⃣ Tag Row */}
  <div className="absolute top-3 left-3 flex gap-1">
    {tags.map(t => <Tag key={t}>{t}</Tag>)}
  </div>

  {/* 2️⃣ Title & Meta */}
  <header className="mt-10 space-y-1">
    <h2 className="text-lg font-semibold leading-tight text-fg line-clamp-3">
      {election.title}
    </h2>
    <p className="text-xs text-muted-foreground">
      {election.office}
    </p>
    <p className="text-xs text-muted-foreground flex items-center gap-1">
      <ClockIcon className="w-3 h-3" /> {election.dateFormatted}
    </p>
  </header>

  {/* 3️⃣ Countdown */}
  <Countdown target={election.date} className="mx-auto" />

  {/* 4️⃣ Candidate Pills */}
  <section className="space-y-2">
    <h3 className="text-sm font-medium flex items-center gap-2">
      <UserIcon className="w-4 h-4 text-primary" /> Key Candidates
    </h3>
    <div className="grid grid-cols-2 gap-3">
      {election.candidates.slice(0,4).map(c => (
        <CandidatePill key={c.id} data={c} />
      ))}
    </div>
  </section>

  {/* 5️⃣ Action Row */}
  <footer className="mt-auto flex justify-between items-center pt-4 border-t border-white/5">
    <IconButton aria-label="Save to Watchlist" icon={Heart} active={saved} onClick={toggleSave} />
    <Button size="sm" icon={ExternalLink} onClick={openDetails}>
      Details
    </Button>
  </footer>
</Card>
```

#### Card Polish — Checklist

| Issue Seen                          | Fix                                                                                        |
| ----------------------------------- | ------------------------------------------------------------------------------------------ |
| **Cramped title lines**             | Apply `leading-tight` + `line-clamp-3` to keep to ≤ 3 lines without overlap                |
| **Mis‑aligned left meta column**    | Replace two‑column grid with stacked meta under title (see code)                           |
| **Candidate pills overflow**        | Wrap in `grid grid-cols-2 gap-3` and set pill width `w-full` with `truncate`               |
| **Timer overflows on small widths** | Give `<Countdown>` internal `min-w-[10rem]` + `text-center`                                |
| **Uneven padding**                  | Uniform `p-6` inside card; outer controls (heart/share) absolute top‑right                 |
| **Lack of visual hierarchy**        | Increase font weight on heading, use muted color for meta, subtle border‑top before footer |
| **Too-dark glass panel**            | Reduce border opacity to `/10` and shadow to `shadow-lg` (lighter)                         |
| **Hover jumpiness**                 | Use `transition-shadow duration-200` instead of transform                                  |

> Drop this component in place of the legacy card. The visual tweaks address spacing, overflow, readability, and hover smoothness—producing a crisp, modern 2025 card UX.

---

### 9.3.1  Handling Empty States & Contrast Fixes

Blank pillars or light‑on‑dark readability issues usually stem from **data‑loading gaps** or **insufficient contrast**. Apply these quick wins:

| Problem                                                                               | Solution                                                                          | Snippet          |
| ------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ---------------- |
| **Empty candidate pill slots**                                                        | Show animated skeletons *or* a fallback tag when list length < 4                  | \`\`\`tsx        |
| const list = election.candidates;                                                     |                                                                                   |                  |
| const safeList = list.length === 0                                                    |                                                                                   |                  |
| ? \[{name:'TBD', party:'', polling\:null}]                                            |                                                                                   |                  |
| : list;                                                                               |                                                                                   |                  |
| \`\`\` + render `<Skeleton className="h-6 w-full rounded-md" />` until fetch resolves |                                                                                   |                  |
| **Over‑dark meta text**                                                               | Elevate contrast: set `--color-muted` = `#9ca3af` (light mode) / `#a1a1aa` (dark) | Tailwind config: |

```ts
colors:{
  muted:'var(--color-muted)',
}
```

Use class `text-muted` instead of `text-muted-foreground` |
\| **Sub‑font brightness in dark cards** | Add subtle glow `text-shadow:0 0 1px rgba(255,255,255,.1)` on headings | `className="text-lg font-semibold leading-tight [text-shadow:0_0_1px_rgba(255,255,255,.1)]"` |
\| **Card looks empty while API fetches** | Wrap grid in `Suspense` + fallback `<SkeletonCard />` | `tsx <Suspense fallback={<SkeletonCard count={8} />}> <ElectionGrid/> </Suspense>` |
\| **Checkbox counts too dim** | Replace raw numbers with `badge` token (`bg-zinc-800/60 text-xs px-1.5 rounded-full`) | See filter sidebar demo |

> **Result:** Users never see gray “empty” boxes; placeholders animate until real data appears, and meta text reaches WCAG AA contrast.

---

### 9.4  Typography & Iconography  Typography & Iconography  Typography & Iconography

* Use **Inter variable** font (`font-sans`).
* Headings: `text-xl font-semibold tracking‑tight`.
* Body: `text-sm leading-6` (balanced spacing).
* Icons from **lucide-react** sized `w-5 h-5`.

### 9.5  Motion & Micro‑interactions

| Element     | Animation                                               | Library           |
| ----------- | ------------------------------------------------------- | ----------------- |
| Card entry  | `initial:{opacity:0, y:20}` → `animate:{opacity:1,y:0}` | framer-motion     |
| Save/heart  | Scale pulse on `aria-pressed` change                    | framer‑motion     |
| View toggle | `layoutId="viewToggle"` shared layout                   | framer‑motion     |
| Modal       | Radix Dialog + fade + scale                             | radix‑ui + framer |

### 9.6  Dark Mode Swap

```tsx
<body className={clsx(theme==='dark' && 'dark', 'min-h-screen')}> … </body>
```

* Use **`useDarkMode()`** hook that syncs to `localStorage` & OS preference.
* Tailwind dark variants (e.g. `dark:bg-zinc-900`).

### 9.7  Accessibility Targets

* Color contrast ≥ 4.5:1 (checked via `@tailwindcss/typography` + axe‑core).
* Focus‑visible ring: `ring-2 ring-primary/60`.
* Reduced‑motion media query respects user settings.

### 9.8  Skeleton Loader

```tsx
<Skeleton className="h-64 rounded-2xl bg-surface0/50 animate-pulse" />
```

### 9.9  Component Library Quick‑start

Install shadcn/ui presets:

```bash
npx shadcn-ui@latest init -y
npx shadcn-ui@latest add button card dialog skeleton toggle
```

### 9.10  Implementation Checklist

* [ ] Inject CSS variables into `globals.css` (light & dark sets).
* [ ] Swap legacy cards with glass‑card class.
* [ ] Add mobile drawer for filters.
* [ ] Integrate motion presets.
* [ ] Verify dark‑mode contrast via Lighthouse.

> **After these steps**, the app’s aesthetic jumps from 2010‑era bootstrap to a polished 2025 SaaS dashboard—while preserving all existing logic & routes.  Immediate Action Items  Immediate Action Items

* [ ] **Finalize data contracts** with all 50 state election boards.
* [ ] **Implement UI token pallet** in Tailwind config.
* [ ] **Deploy TimescaleDB** side‑car & migrate election‑timer table.
* [ ] **Enable CI / CD** with Playwright & axe‑core tests.
* [ ] **Draft privacy policy & GDPR DPIA**.

> **Next Check‑in Suggestion:** run a design review after UI token rollout and confirm alpha KPIs.
