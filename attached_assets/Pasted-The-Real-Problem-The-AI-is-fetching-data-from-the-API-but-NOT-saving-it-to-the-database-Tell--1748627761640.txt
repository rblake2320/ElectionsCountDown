The Real Problem:

  The AI is fetching data from the API but NOT saving it to the database. Tell the AI:

  1. Force Immediate Database Population:

  // Tell the AI:
  "The syncCongressData function is not being called. Add this route to manually trigger it:

  app.post('/api/congress/sync-all', async (req, res) => {
    try {
      console.log('Starting full Congress sync...');

      // Fetch ALL members with proper pagination
      let allMembers = [];
      let offset = 0;
      const limit = 250; // Max allowed by API

      while (true) {
        const response = await fetch(
          `https://api.congress.gov/v3/member?api_key=${CONGRESS_API_KEY}&limit=${limit}&offset=${offset}`
        );
        const data = await response.json();

        if (!data.members || data.members.length === 0) break;

        allMembers = allMembers.concat(data.members);
        offset += limit;

        // Stop if we have all members
        if (!data.pagination || !data.pagination.next) break;
      }

      console.log(`Fetched ${allMembers.length} total members`);

      // Now INSERT them into database
      for (const member of allMembers) {
        await db.insert(congressMembers).values({
          bioguideId: member.bioguideId,
          name: member.name,
          state: member.state,
          party: member.partyName,
          chamber: member.terms?.item?.[0]?.chamber || 'Unknown',
          imageUrl: member.depiction?.imageUrl,
          data: member
        }).onConflictDoUpdate({
          target: congressMembers.bioguideId,
          set: {
            name: member.name,
            party: member.partyName,
            data: member,
            updatedAt: new Date()
          }
        });
      }

      res.json({ message: `Synced ${allMembers.length} members` });
    } catch (error) {
      console.error('Sync error:', error);
      res.status(500).json({ error: error.message });
    }
  });

  Then call: curl -X POST http://localhost:5000/api/congress/sync-all"

  2. Fix the Display Logic:

  // The members route should read from DATABASE not API:
  app.get('/api/members', async (req, res) => {
    // First check database
    const dbMembers = await db.select().from(congressMembers);

    if (dbMembers.length > 0) {
      return res.json({ members: dbMembers });
    }

    // If empty, trigger sync
    await syncCongressData();

    // Then return from database
    const members = await db.select().from(congressMembers);
    res.json({ members });
  });

  3. Verify It Works:

  -- After sync, verify:
  SELECT COUNT(*) FROM congress_members;
  -- Should show 535+

  SELECT state, COUNT(*) as member_count
  FROM congress_members
  GROUP BY state
  ORDER BY member_count DESC;
  -- Should show members from all 50 states

  4. Fix the Frontend Limit:

  // In CongressData component, remove the limit:
  const { data } = await fetch('/api/members'); // No ?limit=5
  // Display ALL members, not just first 5

  Tell the AI EXACTLY:
  "STOP saying it's fixed when the database has 0 members. Instead:
  1. Create the /api/congress/sync-all endpoint I provided
  2. Call it to populate the database
  3. Run SELECT COUNT(*) to verify 535+ members
  4. Update the frontend to show ALL members
  5. Only claim success AFTER the database shows 535+ members"

  The AI needs to understand that showing 5 people for "all members of Congress" is completely unacceptable for a
  platform tracking elections!